{"version":3,"sources":["Components/useResizeObserver.js","Components/WorldMap.js","Components/WorldStats.js","Components/ThingsToTakeCare.js","Components/News.js","Components/WorldLineGraph.js","Components/IndiaLineGraph.js","Components/Home.js","Components/StateChart.js","Components/LinearGradient.js","Components/IndiaMap.js","Components/CountryInfo.js","Components/Survey.js","Components/Helpline.js","App.js","serviceWorker.js","index.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","WorldMap","data","property","svgRef","useRef","wrapperRef","selectedCountry","setSelectedCountry","svg","select","minProp","min","features","feature","properties","maxProp","max","colorScale","scaleLinear","domain","range","getBoundingClientRect","width","height","projection","geoMercator","fitSize","precision","pathGenerator","geoPath","div","append","attr","style","selectAll","join","on","d","country","console","log","name","wb_a2","url","window","location","replace","handleClick","remove","transition","duration","html","event","pageX","pageY","this","classed","className","WorldStats","props","state","indiaData","fetch","then","res","json","setState","rowItems","map","key","code","scope","latest_data","confirmed","deaths","recovered","rowItems2","noOfCases","cured","React","Component","ThingsToTakeCare","inst1","inst2","WOW","live","init","rowItems1","inst","index","flag","setInterval","document","getElementById","backgroundColor","id","data-wow-duration","data-wow-delay","News","checkIndiaNews","checkWorldNews","worldNews","indiaNews","status","articles","news","source","author","href","textDecoration","title","WorldLineGraph","worldCasesArray","checkWorld","totalcaseArray","ele","push","date","total","death","reverse","ctx","Chart","type","labels","datasets","label","pointBackgroundColor","pointBorderColor","pointBorderWidth","borderColor","options","scales","yAxes","ticks","beginAtZero","responsive","maintainAspectRatio","animation","easing","marginLeft","IndiaLineGraph","indiaCasesArray","checkIndia","proxyurl","timeline","Id","Home","check","worldStats","Wdata","calculated","death_rate","recovery_rate","cases_per_million_population","toLowerCase","dummyAllStateTimelineData","require","StateChart","statesTimeLine","statesData","dataCheck","currentStateData","currentStateTimeline","find","x","y","undefined","ctx2","hoverBackgroundColor","rotation","Math","PI","circumference","animateRotate","catch","error","border","toPrecision","src","LinearGradient","boxStyle","margin","gradientStyle","backgroundImage","fromColor","toColor","INDIA_TOPO_JSON","PROJECTION_CONFIG","scale","center","COLOR_RANGE","geographyStyle","default","outline","hover","fill","pressed","stateData","stateName","IndiaMap","tooltipContent","setTooltipContent","value","setValue","gradientData","length","reduce","item","scaleQuantile","onMouseEnter","geo","onMouseLeave","projectionConfig","data-tip","geography","geographies","s","rsmKey","onSubmit","preventDefault","onChange","target","getCode","CountryInfo","countryData","countryInfo","countryDataNew","lineChart","pathParams","pathname","split","temp","population","newtotal","new_confirmed","newDeaths","new_deaths","newRecovered","new_recovered","critical","deathRate","recoveryRate","casePerMillion","overflowX","validEmailRegex","RegExp","Survey","handleChange","bind","handleSubmit","validateForm","fullname","email","aadhar","phoneNumber","district","city","zip","permanentAddress","currentAddress","submitCheck","resultCheck","districtCheck","internationalTravel","nationalTravel","errors","stateOptions","districtOptions","result","message","valid","stateInfo","e","test","info","FormData","dataToSend","axios","post","response","resMessage","toString","Object","values","val","for","placeholder","selected","color","zone","safetyMeter","ProgressBar","stripped","variant","animated","now","ceil","dangerMeter","Helpline","contact_details","state_or_UT","helpline_number","fontSize","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52d019c5.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\n\r\n// Hook for returning the current dimension of the HTML element\r\n\r\nconst useResizeObserver = ref => {\r\n    const [dimensions, setDimensions] = useState(null);\r\n    useEffect(() => {\r\n        const observeTarget = ref.current;\r\n        const resizeObserver = new ResizeObserver(entries => {\r\n            entries.forEach(entry => {\r\n                setDimensions(entry.contentRect);\r\n            });\r\n        });\r\n\r\n        resizeObserver.observe(observeTarget);\r\n        return () => {\r\n            resizeObserver.unobserve(observeTarget);\r\n        };\r\n    }, [ref]);\r\n\r\n    return dimensions;\r\n};\r\n\r\n\r\nexport default useResizeObserver;","import React from 'react';\r\nimport { useRef, useEffect, useState } from \"react\";\r\nimport { select, geoPath, geoMercator, min, max, scaleLinear, color, event } from 'd3';\r\nimport useResizeObserver from \"./useResizeObserver\";\r\n\r\nfunction WorldMap({ data, property }) {\r\n    // console.log(\"From World Map:\", data['features'][0]['properties'][property])\r\n    // data.features.map(feature => {\r\n    //     console.log(feature.properties[property].total_case)\r\n    // })\r\n    const svgRef = useRef();\r\n    const wrapperRef = useRef();\r\n    const dimensions = useResizeObserver(wrapperRef);\r\n    const [selectedCountry, setSelectedCountry] = useState(null);\r\n\r\n    const handleClick = (country) => {\r\n        console.log(country.properties.name, country.properties.wb_a2);\r\n        const url = `/info/${country.properties.wb_a2}/${country.properties['name']}`;\r\n        window.location.replace(url);\r\n    }\r\n\r\n    //called on every data change\r\n    useEffect(() => {\r\n        const svg = select(svgRef.current);\r\n\r\n        const minProp = min(data.features, feature => feature.properties[property]['total_case']);\r\n        const maxProp = max(data.features, feature => feature.properties[property]['total_case']);\r\n        const colorScale = scaleLinear()\r\n            .domain([minProp, maxProp])\r\n            .range([\"#ccc\", \"red\"]);\r\n\r\n        const { width, height } = dimensions || wrapperRef.current.getBoundingClientRect();\r\n\r\n        //projecting geo-coordinates on a 2D-plane\r\n        const projection = geoMercator()\r\n            .fitSize([width, height], selectedCountry || data)\r\n            .precision(100);\r\n\r\n        //takes geojson data, \r\n        //transforms that into the d attribute of a path\r\n\r\n        const pathGenerator = geoPath().projection(projection);\r\n\r\n        var div = select(\"body\").append(\"div\")\r\n            .attr(\"class\", \"tooltip\")\r\n            .style(\"opacity\", 0);\r\n\r\n        //rendering each country\r\n        svg\r\n            .selectAll(\".country\")\r\n            .data(data.features)\r\n            .join(\"path\")\r\n            .on(\"click\", (feature, d) => {\r\n\r\n                handleClick(feature);\r\n                select('.tooltip').remove();\r\n                setSelectedCountry(selectedCountry === feature ? null : feature);\r\n            })\r\n            .on('mouseover', function (feature) {\r\n                div.transition()\r\n                    .duration(200)\r\n                    .style(\"opacity\", .9);\r\n                div.html(\"Country : \" + feature.properties['name'] + \"<br/>\" +\r\n                    \"Total-Cases : \" + feature.properties[property]['total_case'] + \"<br/>\" +\r\n                    \"Total-Deaths : \" + feature.properties[property]['total_death'] + \"<br/>\" +\r\n                    \"Total-Recovered : \" + feature.properties[property]['total_recovered'] + \"<br/>\" +\r\n                    \"Death-Rate : \" + feature.properties[property]['death_rate'] + \"<br/>\" +\r\n                    \"Recovery-Rate : \" + feature.properties[property]['recovery_rate'] + \"<br/>\" +\r\n                    \"Test-per-Million-Population : \" + feature.properties[property]['cases_per_million_population'])\r\n                    .style(\"left\", (event.pageX) + \"px\")\r\n                    .style(\"top\", (event.pageY - 28) + \"px\");\r\n                select(this).classed(\"selected\", true)\r\n            })\r\n            .on(\"mouseout\", function (d) {\r\n                div.transition()\r\n                    .duration(50)\r\n                    .style(\"opacity\", 0);\r\n                select(this).classed(\"selected\", false)\r\n            })\r\n            .attr(\"class\", \"country\")\r\n            .transition()\r\n            .attr(\"fill\", feature => colorScale(feature.properties[property]['total_case']))\r\n            .attr(\"d\", feature => pathGenerator(feature))\r\n\r\n\r\n        // svg\r\n        //     .selectAll(\".label\")\r\n        //     .data([selectedCountry])\r\n        //     .join(\"text\")\r\n        //     .attr(\"fill\", \"blue\")\r\n        //     .attr(\"class\", \"label\")\r\n        //     .text(\r\n        //         feature =>\r\n        //             feature &&\r\n        //             feature.properties.name +\r\n        //             \": \" +\r\n        //             \"Total Cases : \" + feature.properties[property]['total_case'] +\r\n        //             \"Total Death : \" + feature.properties[property]['total_death'] +\r\n        //             \"Total Recoverd : \" + feature.properties[property]['total_recovered'] +\r\n        //             \"Death Rate : \" + feature.properties[property]['death_rate'] +\r\n        //             \"Recovery Rate : \" + feature.properties[property]['recovery_rate']\r\n        //         // JSON.stringify(feature.properties[property])\r\n        //     )\r\n        //     .attr(\"x\", 10)\r\n        //     .attr(\"y\", 25);\r\n\r\n\r\n\r\n    }, [data, dimensions, property, selectedCountry]);\r\n\r\n    return (\r\n        <div ref={wrapperRef} className=\"worldMapWrapper\">\r\n            <svg ref={svgRef}></svg>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default WorldMap;","import React from 'react';\r\n\r\nclass WorldStats extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            indiaData: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://covid-india-cases.herokuapp.com/states')\r\n            .then(res => res.json())\r\n            .then(data => this.setState({ indiaData: data }))\r\n    }\r\n\r\n    render() {\r\n        const allCountryData = this.props.data;\r\n        const rowItems = allCountryData.map(country => (\r\n            <tr key={country.code}>\r\n                <th scope=\"row\">{country.name}</th>\r\n                <td>{country.latest_data.confirmed}</td>\r\n                <td>{country.latest_data.deaths}</td>\r\n                <td>{country.latest_data.recovered}</td>\r\n            </tr>\r\n        ))\r\n        const rowItems2 = this.state.indiaData.map(state => (\r\n            <tr key={state.state}>\r\n                <th scope=\"row\">{state.state}</th>\r\n                <td>{state.noOfCases}</td>\r\n                <td>{state.deaths}</td>\r\n                <td>{state.cured}</td>\r\n            </tr>\r\n        ))\r\n        return (\r\n            <div className=\"worldStats\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <p className=\"tableHead\">World Data</p>\r\n                        <div className=\"card worldData\">\r\n\r\n                            <table className=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr className=\"table-danger\">\r\n                                        <th scope=\"col\">Country</th>\r\n                                        <th scope=\"col\">Confirmed</th>\r\n                                        <th scope=\"col\">Deaths</th>\r\n                                        <th scope=\"col\">Recovered</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {rowItems}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <p className=\"tableHead\">India Data</p>\r\n                        <div className=\"card indiaData\">\r\n\r\n                            <table className=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr className=\"table-danger\">\r\n                                        <th scope=\"col\">State</th>\r\n                                        <th scope=\"col\">Confirmed</th>\r\n                                        <th scope=\"col\">Deaths</th>\r\n                                        <th scope=\"col\">Recovered</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {rowItems2}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default WorldStats;","import React from 'react';\r\nimport WOW from 'wowjs'\r\n\r\nclass ThingsToTakeCare extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            inst1: [\r\n                \"Isolate yourself in a well-ventilated with an attached toilet. If another member is sharing the same room, they are advised to keep a distance of at least 1 meter\",\r\n                \"Stay away from the vulnerable group, including elderly people, pregnant women, children and persons with co-morbidities\",\r\n                \"There should be minimum movement in and outside the house\",\r\n                \"Wash hands often with either soap or water or hand sanitizer\",\r\n                \"Do not share common household items like glasses, cups, utensils, bedding, etc\",\r\n                \"Cover your mouth and nose with a surgical mask, which should be changed every 6-8 hours\",\r\n                \"The used masks should be properly disposed of by burning or burial after disinfecting it with an ordinary bleach solution (5%) or sodium hypochlorite solution (1%)\"\r\n            ],\r\n            inst2: [\r\n                \"Only one of the family members should take care of the person, and no visitors should be allowed\",\r\n                \"Avoid direct touch and use gloves whenever you meet the quarantined person\",\r\n                \"Never forget to sanitize yourself properly before and after meeting the person\",\r\n                \"If the home quarantined person develops symptoms, all his/ her family members will be quarantined for 14 days, with a follow up of another 14 days, till the reports turn negative\"\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (typeof window !== 'undefined') {\r\n            const wow = new WOW.WOW({\r\n                live: true,\r\n            })\r\n            wow.init()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const rowItems1 = this.state.inst1.map((inst, index) => (\r\n            index % 2 === 0 ?\r\n                <tr key={index} className=\"table-warning\">\r\n                    <td>{index + 1} </td>\r\n                    <td>{inst}</td>\r\n                </tr>\r\n                :\r\n                <tr key={index} className=\"table-info\">\r\n                    <td>{index + 1} </td>\r\n                    <td>{inst}</td>\r\n                </tr>\r\n        ))\r\n\r\n        const rowItems2 = this.state.inst2.map((inst, index) => (\r\n            index % 2 === 0 ?\r\n                <tr key={index} className=\"table-warning\">\r\n                    <td>{index + 1} </td>\r\n                    <td>{inst}</td>\r\n                </tr>\r\n                :\r\n                <tr key={index} className=\"table-info\">\r\n                    <td>{index + 1} </td>\r\n                    <td>{inst}</td>\r\n                </tr>\r\n        ))\r\n\r\n        var flag = false;\r\n        setInterval(() => {\r\n            if (flag === false) {\r\n                document.getElementById(\"flash\").style.backgroundColor = 'yellow';\r\n                flag = true;\r\n            } else {\r\n                document.getElementById(\"flash\").style.backgroundColor = 'lightgreen';\r\n                flag = false;\r\n            }\r\n\r\n        }, 100);\r\n\r\n        return (\r\n            <div className=\"guidelines\">\r\n                <p className=\"wow bounceInUp\" id=\"flash\">Pay Attention Here</p>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <p className=\"tableHead\">Guidelines for Home Quarantined</p>\r\n                        <div className=\"card wow slideInRight\" data-wow-duration=\"2s\" data-wow-delay=\"1s\">\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    {rowItems1}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <p className=\"tableHead\">Guidelines for General People</p>\r\n                        <div className=\"card wow bounceInUp\" data-wow-duration=\"2s\" data-wow-delay=\"2s\">\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    {rowItems2}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ThingsToTakeCare;","import React from 'react';\r\nimport WOW from 'wowjs';\r\n\r\nvar key = '3475b37b953e49fe8593157e1f179931'\r\nclass News extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            checkIndiaNews: false,\r\n            checkWorldNews: false,\r\n            worldNews: [],\r\n            indiaNews: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (typeof window !== 'undefined') {\r\n            const wow = new WOW.WOW({\r\n                live: true,\r\n            })\r\n            wow.init()\r\n        }\r\n        fetch(`http://newsapi.org/v2/top-headlines?country=in&q=corona&apiKey=${key}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.status === 'ok') {\r\n                    return data.articles\r\n                } else {\r\n                    return [];\r\n                }\r\n            })\r\n            .then(data => this.setState({ indiaNews: data, checkIndiaNews: true }));\r\n\r\n\r\n        fetch(`http://newsapi.org/v2/top-headlines?country=us&q=corona&apiKey=${key}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                // console.log(data)\r\n                if (data.status === 'ok') {\r\n                    return data.articles\r\n                } else {\r\n                    return [];\r\n                }\r\n            })\r\n            .then(data => this.setState({ worldNews: data, checkWorldNews: true }));\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.state.worldNews)\r\n        const rowItems1 = this.state.worldNews.map((news, index) => (\r\n            <tr className=\"table-info\" key={index}>\r\n                <th scope=\"row\">{news.source.name}</th>\r\n                <td>{news.author}: <br />\r\n                    <a href={news.url} style={{ textDecoration: 'none' }}>{news.title}</a>\r\n                </td>\r\n            </tr>\r\n        ))\r\n\r\n        const rowItems2 = this.state.indiaNews.map((news, index) => (\r\n            <tr className=\"table-warning\" key={index}>\r\n                <th scope=\"row\">{news.source.name}</th>\r\n                <td>{news.author}: <br />\r\n                    <a href={news.url} style={{ textDecoration: 'none' }}>{news.title}</a>\r\n                </td>\r\n            </tr>\r\n        ))\r\n\r\n        var flag = false;\r\n        setInterval(() => {\r\n            if (flag === false) {\r\n                document.getElementById(\"flashAgain\").style.backgroundColor = 'yellow';\r\n                flag = true;\r\n            } else {\r\n                document.getElementById(\"flashAgain\").style.backgroundColor = 'lightgreen';\r\n                flag = false;\r\n            }\r\n\r\n        }, 100);\r\n\r\n\r\n        return (\r\n            <div className=\"news\">\r\n                <p className=\"wow bounceInUp\" id=\"flashAgain\">Corona News Update</p>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <p className=\"tableHead\">World News</p>\r\n                        <div className=\"card wow bounceInDown worldNews\" data-wow-duration=\"2s\" data-wow-delay=\"1s\">\r\n                            {this.state.worldNews !== [] && (\r\n                                <table className=\"table\">\r\n                                    <tbody>\r\n                                        {rowItems1}\r\n                                    </tbody>\r\n                                </table>\r\n                            )}\r\n                            {this.state.worldNews === [] && {\r\n                                //Loader or dipaly regret\r\n                            }}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <p className=\"tableHead\">India News</p>\r\n                        <div className=\"card wow bounceInUp indiaNews\" data-wow-duration=\"2s\" data-wow-delay=\"2s\">\r\n                            {this.state.indiaNews !== [] && (\r\n                                <table className=\"table\">\r\n                                    <tbody>\r\n                                        {rowItems2}\r\n                                    </tbody>\r\n                                </table>\r\n                            )}\r\n                            {this.state.indiaNews === [] && {\r\n                                //Loader or dipaly regret\r\n                            }}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport Chart from 'chart.js';\r\n\r\n\r\nclass WorldLineGraph extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            worldCasesArray: [],\r\n            checkWorld: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        fetch(`https://corona-api.com/timeline`)\r\n            .then(res => res.json())\r\n            .then(data => data.data)\r\n            .then(data => {\r\n                var totalcaseArray = [];\r\n                data.map((ele) => {\r\n                    totalcaseArray.push({ date: ele.date, total: ele.confirmed, death: ele.deaths, recovered: ele.recovered })\r\n                })\r\n                totalcaseArray.reverse();\r\n                this.setState({ worldCasesArray: totalcaseArray, checkWorld: true })\r\n            })\r\n            .then(() => {\r\n                var ctx = document.getElementById('myChart');\r\n                var myChart = new Chart(ctx, {\r\n                    type: 'line',\r\n                    data: {\r\n                        labels: this.state.worldCasesArray.map(ele => ele.date),\r\n                        datasets: [{\r\n                            label: 'Total Cases',\r\n                            data: this.state.worldCasesArray.map(ele => ele.total),\r\n                            pointBackgroundColor: \"orange\",\r\n                            pointBorderColor: 'brown',\r\n                            pointBorderWidth: 0.2,\r\n                            borderColor: \"orange\"\r\n                        }, {\r\n                            label: 'Total Deaths',\r\n                            data: this.state.worldCasesArray.map(ele => ele.death),\r\n                            pointBackgroundColor: \"red\",\r\n                            pointBorderColor: 'brown',\r\n                            pointBorderWidth: 0.2,\r\n                            borderColor: \"red\"\r\n                        }, {\r\n                            label: 'Total Recovered',\r\n                            data: this.state.worldCasesArray.map(ele => ele.recovered),\r\n                            pointBackgroundColor: \"green\",\r\n                            pointBorderColor: 'brown',\r\n                            pointBorderWidth: 0.2,\r\n                            borderColor: \"green\"\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        scales: {\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    beginAtZero: true\r\n                                }\r\n                            }]\r\n                        },\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        animation: {\r\n                            duration: 2000,\r\n                            easing: 'easeInCubic'\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"trans\" style={{ marginLeft: \"4vw\" }}>\r\n                <canvas id=\"myChart\" width=\"100%\" height=\"100%\"></canvas>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default WorldLineGraph;","import React from 'react';\r\nimport Chart from 'chart.js';\r\n\r\n\r\nclass IndiaLineGraph extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            indiaCasesArray: [],\r\n            checkIndia: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n        const url = \"http://corona-api.com/countries/IN\";\r\n        fetch(proxyurl + url)\r\n            .then(res => res.json())\r\n            .then(data => data.data.timeline)\r\n            .then(data => {\r\n                console.log(\"India Graph\", data)\r\n                var totalcaseArray = [];\r\n                data.map((ele) => {\r\n                    totalcaseArray.push({\r\n                        date: ele.date, total: ele.confirmed,\r\n                        death: ele.deaths, recovered: ele.recovered\r\n                    })\r\n                })\r\n                totalcaseArray.reverse();\r\n                this.setState({ indiaCasesArray: totalcaseArray, checkIndia: true })\r\n            })\r\n            .then(() => {\r\n                var ctx = document.getElementById(this.props.Id);\r\n                var myChart = new Chart(ctx, {\r\n                    type: 'line',\r\n                    data: {\r\n                        labels: this.state.indiaCasesArray.map(ele => ele.date),\r\n                        datasets: [{\r\n                            label: 'Total Cases',\r\n                            data: this.state.indiaCasesArray.map(ele => ele.total),\r\n                            pointBackgroundColor: \"orange\",\r\n                            pointBorderColor: 'brown',\r\n                            pointBorderWidth: 0.2,\r\n                            borderColor: \"orange\"\r\n                        }, {\r\n                            label: 'Total Deaths',\r\n                            data: this.state.indiaCasesArray.map(ele => ele.death),\r\n                            pointBackgroundColor: \"red\",\r\n                            pointBorderColor: 'brown',\r\n                            pointBorderWidth: 0.2,\r\n                            borderColor: \"red\"\r\n                        }, {\r\n                            label: 'Total Recovered',\r\n                            data: this.state.indiaCasesArray.map(ele => ele.recovered),\r\n                            pointBackgroundColor: \"green\",\r\n                            pointBorderColor: 'brown',\r\n                            pointBorderWidth: 0.2,\r\n                            borderColor: \"green\"\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        scales: {\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    beginAtZero: true\r\n                                }\r\n                            }]\r\n                        },\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        animation: {\r\n                            duration: 2000,\r\n                            easing: 'easeInCubic'\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"trans\" style={{ marginLeft: \"6vw\" }}>\r\n                <canvas id=\"myChart2\" width=\"100%\" height=\"100%\"></canvas>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default IndiaLineGraph;","import React from 'react';\r\nimport Wdata from '../custom.geo.json';\r\nimport WorldMap from './WorldMap';\r\nimport WorldStats from './WorldStats';\r\nimport ThingsToTakeCare from './ThingsToTakeCare';\r\nimport News from './News';\r\nimport WorldLineGraph from './WorldLineGraph';\r\nimport IndiaLineGraph from './IndiaLineGraph';\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            check: false,\r\n            property: \"\",\r\n            data: [],\r\n            worldStats: []\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://corona-api.com/countries\")\r\n            .then(res => res.json())\r\n            .then(data => data.data)\r\n            .then(data => {\r\n                this.setState({ worldStats: data })\r\n                // console.log(\"ApiCheck: \", data[0]['name'])\r\n                Wdata['features'].map(feature => {\r\n                    let flag = false;\r\n                    data.map(country => {\r\n                        if (country.name === 'USA' && feature['properties']['name'] === 'United States') {\r\n                            feature['properties']['corona'] = {\r\n                                \"total_case\": country.latest_data.confirmed,\r\n                                \"total_death\": country.latest_data.deaths,\r\n                                \"total_recovered\": country.latest_data.recovered,\r\n                                \"death_rate\": country.latest_data.calculated.death_rate,\r\n                                \"recovery_rate\": country.latest_data.calculated.recovery_rate,\r\n                                \"cases_per_million_population\": country.latest_data.calculated.cases_per_million_population\r\n                            }\r\n                            flag = true;\r\n                        }\r\n\r\n                        if (country.name.toLowerCase() === feature['properties']['name'].toLowerCase() ||\r\n                            country.name.toLowerCase() === feature['properties']['admin'].toLowerCase() ||\r\n                            country.name.toLowerCase() === feature['properties']['adm0_a3']) {\r\n                            flag = true;\r\n\r\n                            feature['properties']['corona'] = {\r\n                                \"total_case\": country.latest_data.confirmed,\r\n                                \"total_death\": country.latest_data.deaths,\r\n                                \"total_recovered\": country.latest_data.recovered,\r\n                                \"death_rate\": country.latest_data.calculated.death_rate,\r\n                                \"recovery_rate\": country.latest_data.calculated.recovery_rate,\r\n                                \"cases_per_million_population\": country.latest_data.calculated.cases_per_million_population\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                    if (flag == false) {\r\n                        feature['properties']['corona'] = {\r\n                            \"total_case\": 0,\r\n                            \"total_death\": 0,\r\n                            \"total_recovered\": 0,\r\n                            \"death_rate\": 0,\r\n                            \"recovery_rate\": 0,\r\n                            \"cases_per_million_population\": 0\r\n                        }\r\n                    }\r\n                    // console.log(data.indexOf(feature['properties']['name']))\r\n                })\r\n                this.setState({ check: true, data: Wdata, property: \"corona\" });\r\n                // this.setState({ property: \"pop_est\" })\r\n                // console.log(\"Local Data Check:\", Wdata['features'][0]['properties']['corona'])\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>World Map Chart</h2>\r\n                {this.state.check === true && (\r\n                    <WorldMap data={this.state.data} property={this.state.property} />\r\n                )}\r\n\r\n                {this.state.check === true && (\r\n                    <WorldStats data={this.state.worldStats} />\r\n\r\n                )}\r\n                <div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <WorldLineGraph />\r\n                        </div>\r\n                        <div className=\"col\">\r\n                            <IndiaLineGraph Id={'myChart2'} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <ThingsToTakeCare />\r\n                <News />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport Chart from 'chart.js';\r\nconst dummyAllStateTimelineData = require('../StatewiseReport.json');\r\n\r\nclass StateChart extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            statesTimeLine: [],\r\n            timeline: false,\r\n            statesData: [],\r\n            dataCheck: false,\r\n            currentStateData: [],\r\n        }\r\n\r\n    }\r\n    UNSAFE_componentWillReceiveProps() {\r\n        var currentStateTimeline = this.state.statesTimeLine.find(state => state['State UT'] === this.props.name);\r\n        var currentStateData = this.state.statesData.find(state => state['state'] === this.props.name);\r\n        this.setState({ currentStateData: currentStateData })\r\n        console.log(this.state.statesData, this.props.name)\r\n        var x = [];\r\n        var y = [];\r\n        for (let key in currentStateTimeline) {\r\n            y.push(currentStateTimeline[key]);\r\n            x.push(key)\r\n        }\r\n\r\n        // if (myChart) {\r\n        //     console.log(\"Yes\")\r\n        //     myChart.destroy();\r\n        // }\r\n\r\n        if (currentStateTimeline !== undefined) {\r\n            var ctx = document.getElementById('line');\r\n            var myChart = new Chart(ctx, {\r\n                type: 'line',\r\n                data: {\r\n                    labels: x,\r\n                    datasets: [{\r\n                        label: 'Total Cases',\r\n                        data: y,\r\n                        pointBackgroundColor: \"orange\",\r\n                        pointBorderColor: 'brown',\r\n                        pointBorderWidth: 0.2,\r\n                        borderColor: \"orange\"\r\n                    }]\r\n                },\r\n                options: {\r\n                    scales: {\r\n                        yAxes: [{\r\n                            ticks: {\r\n                                beginAtZero: true\r\n                            }\r\n                        }]\r\n                    },\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    animation: {\r\n                        duration: 2000,\r\n                        easing: 'easeInCubic'\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        // })\r\n\r\n\r\n\r\n        if (currentStateData !== undefined) {\r\n            var ctx2 = document.getElementById('pie');\r\n            var myChart2 = new Chart(ctx2, {\r\n                type: 'doughnut',\r\n                data: {\r\n                    datasets: [{\r\n                        data: [currentStateData.noOfCases, currentStateData.cured, currentStateData.deaths],\r\n                        backgroundColor: ['Yellow', 'Green', 'Red'],\r\n                        hoverBackgroundColor: 'Gray'\r\n                    }],\r\n                    labels: [\r\n                        'Active',\r\n                        'Cured',\r\n                        'Dead'\r\n                    ],\r\n                },\r\n                options: {\r\n                    rotation: -0.5 * Math.PI,\r\n                    circumference: 2 * Math.PI,\r\n                    animation: {\r\n                        animateRotate: true,\r\n                        duration: 1500\r\n                    },\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n\r\n    }\r\n    componentDidMount() {\r\n\r\n        fetch('https://covid-india-cases.herokuapp.com/states')\r\n            .then(res => res.json())\r\n            .then(data => data)\r\n            .then(data => {\r\n                this.setState({ statesData: data, dataCheck: true })\r\n                var currentStateData = this.state.statesData.find(state => state['state'] === this.props.name);\r\n                this.setState({ currentStateData: currentStateData })\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n        fetch('https://covid-india-cases.herokuapp.com/statetimeline/')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data[0]['State UT'], this.props.name)\r\n                this.setState({ statesTimeLine: data, timeline: true })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                //console.log(require('../StatewiseReport.json'))\r\n                this.setState({ statesTimeLine: dummyAllStateTimelineData, timeline: true })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.timeline === true && this.state.dataCheck === true) {\r\n            return (\r\n                <div style={{ width: \"100%\", height: \"100%\" }}>\r\n                    <div className=\"row\">\r\n                        <p style={{ marginLeft: '40%' }}>{this.props.name}</p>\r\n                    </div>\r\n                    <div className=\"row sideData\">\r\n                        <canvas id=\"line\" width=\"100%\" height=\"100%\"></canvas>\r\n                    </div>\r\n                    <div className=\"row sideData\">\r\n                        <canvas id=\"pie\" width=\"100%\" height=\"100%\"></canvas>\r\n                    </div>\r\n                    <div className=\"container sideData\" style={{ border: \"1px solid black\" }}>\r\n                        {this.state.dataCheck && this.state.currentStateData !== undefined && (\r\n                            <div className=\"row infosec\" >\r\n                                <div className=\"col-4 card state-info shadow\">\r\n                                    <p className=\"infoText\">Total Cases</p>\r\n                                    {this.state.currentStateData.noOfCases}\r\n                                </div>\r\n                                <div className=\"col-4card state-info shadow\">\r\n                                    <p className=\"infoText\">Total Recovery</p>\r\n                                    {this.state.currentStateData.cured}\r\n                                </div>\r\n                                <div className=\"col-4 card state-info shadow\">\r\n                                    <p className=\"infoText\">Total Deaths</p>\r\n                                    {this.state.currentStateData.deaths}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {this.state.dataCheck && this.state.currentStateData !== undefined && (\r\n                            <div className=\"row infosec\">\r\n                                <div className=\"col-4 card state-info shadow\">\r\n                                    <p className=\"infoText\">Total Active Cases</p>\r\n                                    {this.state.currentStateData.noOfCases - this.state.currentStateData.cured - this.state.currentStateData.deaths}\r\n                                </div>\r\n                                <div className=\"col-4 card state-info shadow\">\r\n                                    <p className=\"infoText\">Death Rate</p>\r\n                                    {(this.state.currentStateData.deaths / this.state.currentStateData.noOfCases).toPrecision(3)}\r\n                                </div>\r\n                                <div className=\"col-4 card state-info shadow\">\r\n                                    <p className=\"infoText\">Recovery Rate Rate</p>\r\n                                    {(this.state.currentStateData.cured / this.state.currentStateData.noOfCases).toPrecision(3)}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif\"\r\n                    style={{ width: \"100%\", height: \"100%\" }} />\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default StateChart;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst LinearGradient = props => {\r\n    const { data } = props;\r\n    const boxStyle = {\r\n        width: 180,\r\n        margin: 'auto'\r\n    };\r\n    const gradientStyle = {\r\n        backgroundImage: `linear-gradient(to right, ${data.fromColor} , ${data.toColor})`,\r\n        height: 20\r\n    };\r\n    return (\r\n        <div>\r\n            <div style={boxStyle} className=\"display-flex\">\r\n                <span>{data.min}</span>\r\n                <span className=\"fill\"></span>\r\n                <span>{data.max}</span>\r\n            </div>\r\n            <div style={{ ...boxStyle, ...gradientStyle }} className=\"mt8\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nLinearGradient.propTypes = {\r\n    data: PropTypes.object.isRequired\r\n};\r\n\r\nexport default LinearGradient;","// commented out return statement on mouse enter if error persists do the changes\r\n\r\nimport React, { useState } from 'react';\r\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\r\nimport { scaleQuantile } from 'd3';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport IndiaLineGraph from './IndiaLineGraph';\r\nimport StateChart from './StateChart';\r\nimport LinearGradient from './LinearGradient.js';\r\n\r\n/**\r\n* Courtesy: https://github.com/varunon9/india-choropleth-javascript/blob/master\r\n* for other countries/world? \r\n* Visit: https://github.com/markmarkoh/datamaps\r\n*/\r\nconst INDIA_TOPO_JSON = require('../india.topo.json');\r\n\r\nconst PROJECTION_CONFIG = {\r\n    scale: 350,\r\n    center: [78.9629, 22.5937]\r\n};\r\n\r\n// Red Variants\r\nconst COLOR_RANGE = [\r\n    '#ffedea',\r\n    '#ffcec5',\r\n    '#ffad9f',\r\n    '#ff8a75',\r\n    '#ff5533',\r\n    '#e2492d',\r\n    '#be3d26',\r\n    '#9a311f',\r\n    '#782618'\r\n];\r\n\r\nconst DEFAULT_COLOR = '#EEE';\r\n\r\n// const getRandomInt = () => {\r\n//     return parseInt(Math.random() * 100);\r\n// };\r\n\r\nconst geographyStyle = {\r\n    default: {\r\n        outline: true\r\n    },\r\n    hover: {\r\n        fill: '#ccc',\r\n        transition: 'all 250ms',\r\n        outline: 'none'\r\n    },\r\n    pressed: {\r\n        outline: 'none'\r\n    }\r\n};\r\n\r\nvar stateData = [\r\n    { id: 'AN', state: 'Andaman and Nicobar Islands' },\r\n    { id: 'AP', state: 'Andhra Pradesh' },\r\n    { id: 'AR', state: 'Arunachal Pradesh' },\r\n    { id: 'AS', state: 'Assam' },\r\n    { id: 'BR', state: 'Bihar' },\r\n    { id: 'CH', state: 'Chandigarh' },\r\n    { id: 'CT', state: 'Chhattisgarh' },\r\n    { id: 'DN', state: 'Dadra and Nagar Haveli' },\r\n    { id: 'DL', state: 'Delhi' },\r\n    { id: 'GA', state: 'Goa' },\r\n    { id: 'GJ', state: 'Gujarat' },\r\n    { id: 'HR', state: 'Haryana' },\r\n    { id: 'HP', state: 'Himachal Pradesh' },\r\n    { id: 'JK', state: 'Jammu and Kashmir' },\r\n    { id: 'JH', state: 'Jharkhand' },\r\n    { id: 'KA', state: 'Karnataka' },\r\n    { id: 'KL', state: 'Kerala' },\r\n    { id: 'LA', state: 'Ladakh' },\r\n    { id: 'LD', state: 'Lakshadweep' },\r\n    { id: 'MP', state: 'Madhya Pradesh' },\r\n    { id: 'MH', state: 'Maharashtra' },\r\n    { id: 'MN', state: 'Manipur' },\r\n    { id: 'ML', state: 'Meghalaya' },\r\n    { id: 'MZ', state: 'Mizoram' },\r\n    { id: 'NL', state: 'Nagaland' },\r\n    { id: 'OR', state: 'Odisha' },\r\n    { id: 'PY', state: 'Puducherry' },\r\n    { id: 'PB', state: 'Punjab' },\r\n    { id: 'RJ', state: 'Rajasthan' },\r\n    { id: 'SK', state: 'Sikkim' },\r\n    { id: 'TN', state: 'Tamil Nadu' },\r\n    { id: 'TG', state: 'Telengana' },\r\n    { id: 'TR', state: 'Tripura' },\r\n    { id: 'UP', state: 'Uttar Pradesh' },\r\n    { id: 'UK', state: 'Uttarakhand' },\r\n    { id: 'WB', state: 'West Bengal' }\r\n];\r\n\r\n// will generate random heatmap data on every cal\r\nvar stateName = stateData.map(ele => ele.state);\r\nconst getHeatMapData = () => {\r\n    fetch('https://covid-india-cases.herokuapp.com/states')\r\n        .then(res => res.json())\r\n        .then(data => data)\r\n        .then(data => {\r\n            //dummyAllStateData = data;\r\n            data.map((state, index) => stateData[index]['value'] = state.noOfCases)\r\n        })\r\n\r\n    return stateData;\r\n};\r\n\r\nfunction IndiaMap() {\r\n\r\n    const [tooltipContent, setTooltipContent] = useState('');\r\n    const [data, setData] = useState(getHeatMapData());\r\n    const [value, setValue] = useState('Andaman and Nicobar Islands');\r\n    //const [currentState, setCurrentState] = useState({});\r\n    // console.log(data);\r\n\r\n    const gradientData = {\r\n        fromColor: COLOR_RANGE[0],\r\n        toColor: COLOR_RANGE[COLOR_RANGE.length - 1],\r\n        min: data.reduce((min, item) => (item.value < min ? item.value : min), 100000),\r\n        max: data.reduce((max, item) => (item.value > max ? item.value : max), 0)\r\n    };\r\n\r\n    const colorScale = scaleQuantile()\r\n        .domain(data.map(d => d.value))\r\n        .range(COLOR_RANGE);\r\n\r\n    const onMouseEnter = (geo, current) => {\r\n        return () => {\r\n            setTooltipContent(`${geo.properties.name}: ${current.value}`);\r\n        };\r\n    };\r\n\r\n    const onMouseLeave = () => {\r\n        setTooltipContent('');\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value)\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        console.log(value)\r\n    }\r\n\r\n    const options = stateName.map(name => (\r\n        <option value={name} key={name}>{name}</option>\r\n    ));\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col full-width-height map-container-left\">\r\n                <ReactTooltip>{tooltipContent}</ReactTooltip>\r\n                <ComposableMap\r\n                    projectionConfig={PROJECTION_CONFIG}\r\n                    projection=\"geoMercator\"\r\n                    width={200}\r\n                    height={180}\r\n                    data-tip=\"\"\r\n                >\r\n                    <Geographies geography={INDIA_TOPO_JSON}>\r\n                        {({ geographies }) =>\r\n                            geographies.map(geo => {\r\n                                const current = data.find(s => s.id === geo.id);\r\n                                return (\r\n                                    <Geography\r\n                                        key={geo.rsmKey}\r\n                                        geography={geo}\r\n                                        fill={current ? colorScale(current.value) : DEFAULT_COLOR}\r\n                                        style={geographyStyle}\r\n                                        onMouseEnter={onMouseEnter(geo, current)}\r\n                                        onMouseLeave={onMouseLeave}\r\n                                    />\r\n                                );\r\n                            })\r\n                        }\r\n                    </Geographies >\r\n                </ComposableMap>\r\n                <LinearGradient data={gradientData} />\r\n                <form onSubmit={handleSubmit}>\r\n                    <label>\r\n                        select the state:\r\n                    <select value={value} onChange={handleChange}>\r\n                            {options}\r\n                        </select>\r\n                    </label>\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n            </div>\r\n            <div className=\"col full-width-height map-container-right\">\r\n                <StateChart name={value} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IndiaMap;","import React from 'react';\r\nimport Chart from 'chart.js'\r\nimport { rgb } from 'd3';\r\nconst { getCode } = require('country-list');\r\n\r\n\r\nclass CountryInfo extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            country: '',\r\n            countryData: [],\r\n            countryInfo: [],\r\n            check: false\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        var ctx = document.getElementById('lineGraph');\r\n        var { countryData } = this.state;\r\n        var countryDataNew = countryData.reverse();\r\n        if (!lineChart) {\r\n            var lineChart = new Chart(ctx, {\r\n                type: 'line',\r\n                data: {\r\n                    labels: countryDataNew.map(ele => ele.date),\r\n                    datasets: [{\r\n                        label: 'Total Cases',\r\n                        data: countryDataNew.map(ele => ele.confirmed),\r\n                        pointBackgroundColor: \"orange\",\r\n                        pointBorderColor: 'brown',\r\n                        pointBorderWidth: 0.2,\r\n                        borderColor: \"orange\",\r\n                    }, {\r\n                        label: 'Total Deaths',\r\n                        data: countryDataNew.map(ele => ele.deaths),\r\n                        pointBackgroundColor: \"red\",\r\n                        pointBorderColor: 'brown',\r\n                        pointBorderWidth: 0.2,\r\n                        borderColor: \"red\"\r\n                    }, {\r\n                        label: 'Total Recovered',\r\n                        data: countryDataNew.map(ele => ele.recovered),\r\n                        pointBackgroundColor: \"green\",\r\n                        pointBorderColor: 'brown',\r\n                        pointBorderWidth: 0.2,\r\n                        borderColor: \"green\"\r\n                    }]\r\n                },\r\n                options: {\r\n                    scales: {\r\n                        yAxes: [{\r\n                            ticks: {\r\n                                beginAtZero: true\r\n                            }\r\n                        }]\r\n                    },\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    animation: {\r\n                        duration: 2000,\r\n                        easing: 'easeInCubic'\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        var ctx2 = document.getElementById(\"doughGraph\");\r\n        var doughChart = new Chart(ctx2, {\r\n            type: 'doughnut',\r\n            data: {\r\n                datasets: [{\r\n                    data: [this.state.countryInfo.total, this.state.countryInfo.recovered\r\n                        , this.state.countryInfo.deaths],\r\n                    backgroundColor: ['Yellow', 'Green', 'Red'],\r\n                    hoverBackgroundColor: 'Gray'\r\n                }],\r\n                labels: [\r\n                    'Active',\r\n                    'Cured',\r\n                    'Dead'\r\n                ],\r\n            },\r\n            options: {\r\n                rotation: -0.5 * Math.PI,\r\n                circumference: 2 * Math.PI,\r\n                animation: {\r\n                    animateRotate: true,\r\n                    duration: 1500\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n            }\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        console.log(\"Country-Info\")\r\n        const pathParams = window.location.pathname.split('/');\r\n        const country = pathParams[pathParams.length - 1]\r\n        this.setState({ country: country });\r\n        const code = getCode(country)\r\n        const proxy_url = \"https://cors-anywhere.herokuapp.com/\";\r\n        const url = `http://corona-api.com/countries/${code}`\r\n\r\n\r\n\r\n        fetch(proxy_url + url)\r\n            .then(res => res.json())\r\n            .then(data => data.data)\r\n            .then(data => {\r\n                this.setState({ countryData: data.timeline });\r\n\r\n                const temp = {\r\n                    name: data.name,\r\n                    population: data.population,\r\n                    total: data.latest_data.confirmed,\r\n                    newtotal: data.timeline[0].new_confirmed,\r\n                    deaths: data.latest_data.deaths,\r\n                    newDeaths: data.timeline[0].new_deaths,\r\n                    recovered: data.latest_data.recovered,\r\n                    newRecovered: data.timeline[0].new_recovered,\r\n                    critical: data.latest_data.critical,\r\n                    deathRate: data.latest_data.calculated.death_rate,\r\n                    recoveryRate: data.latest_data.calculated.recovery_rate,\r\n                    casePerMillion: data.latest_data.calculated.cases_per_million_population,\r\n\r\n                }\r\n\r\n                this.setState({ countryInfo: temp })\r\n            })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div style={{ width: \"100vw\", height: \"100vh\", overflowX: \"hidden\" }}>\r\n                <div className=\"row justify-content-md-center\">\r\n                    <div id=\"country-name\" className=\"card shadow\">{this.state.countryInfo.name} Corona Info</div>\r\n                </div>\r\n                <div className=\" main-info\" >\r\n                    <div className=\"row\" style={{ width: \"100%\", height: \"100%\" }}>\r\n                        <div className=\"col-md-3 col-info\">\r\n                            <div className=\"singleInfoBlock shadow\">\r\n                                <p>Total Cases</p>\r\n                                <p>{this.state.countryInfo.total}(+{this.state.countryInfo.newtotal})</p>\r\n                            </div>\r\n                            <div className=\"singleInfoBlock shadow\">\r\n                                <p>Deaths</p>\r\n                                <p>{this.state.countryInfo.deaths}(+{this.state.countryInfo.newDeaths})</p>\r\n                            </div>\r\n                            <div className=\"singleInfoBlock shadow\">\r\n                                <p>Recovered</p>\r\n                                <p>{this.state.countryInfo.recovered}(+{this.state.countryInfo.newRecovered})</p>\r\n                            </div>\r\n                            <div className=\"singleInfoBlock shadow\">\r\n                                <p>Critical</p>\r\n                                <p>{this.state.countryInfo.critical}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-6 col-info\">\r\n                            <div className=\"graphBlock\">\r\n                                <canvas id=\"lineGraph\" width=\"100%\" height=\"100%\"></canvas>\r\n                            </div>\r\n                            <div className=\"graphBlock\">\r\n                                <canvas id=\"doughGraph\" width=\"100%\" height=\"100%\"></canvas>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-3 col-info\">\r\n                            <div className=\"singleInfoBlock shadow\">\r\n                                <p>Population</p>\r\n                                <p>{this.state.countryInfo.population}</p>\r\n                            </div>\r\n                            <div className=\"singleInfoBlock shadow\">\r\n                                <p>Cases Per Million</p>\r\n                                <p>{this.state.countryInfo.casePerMillion}</p>\r\n                            </div>\r\n                            <div className=\"singleInfoBlock shadow\">\r\n                                <p>Death Rate</p>\r\n                                <p>{this.state.countryInfo.deathRate}</p>\r\n                            </div>\r\n                            <div className=\"singleInfoBlock shadow\">\r\n                                <p>Recovery Rate</p>\r\n                                <p>{this.state.countryInfo.recoveryRate}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default CountryInfo;","import React from 'react';\r\nimport stateInfo from '../stateInfo.json';\r\nimport axios from 'axios';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport Loader from 'react-loader-spinner';\r\nimport { ProgressBar } from 'react-bootstrap';\r\n\r\nconst validEmailRegex = RegExp(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i);\r\n\r\nclass Survey extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.validateForm = this.validateForm.bind(this);\r\n        this.state = {\r\n            fullname: '',\r\n            email: '',\r\n            aadhar: '',\r\n            phoneNumber: '',\r\n            state: '',\r\n            district: '',\r\n            city: '',\r\n            zip: '',\r\n            permanentAddress: '',\r\n            currentAddress: '',\r\n            submitCheck: false,\r\n            resultCheck: false,\r\n            districtCheck: false,\r\n            internationalTravel: 'No',\r\n            nationalTravel: 'No',\r\n            errors: {\r\n                fullname: '',\r\n                email: '',\r\n                currentAddress: '',\r\n                permanentAddress: '',\r\n                city: '',\r\n                aadhar: '',\r\n                phoneNumber: '',\r\n                zip: '',\r\n                state: '',\r\n                district: ''\r\n            },\r\n            stateOptions: [],\r\n            districtOptions: [],\r\n            result: [],\r\n            message: '',\r\n            valid: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        var temp = [];\r\n        for (let key in stateInfo) {\r\n            temp.push(key);\r\n        }\r\n        let errors = this.state.errors;\r\n        for (let key in errors) {\r\n            errors[key] = '';\r\n        }\r\n        this.setState({ errors, stateOptions: temp, districtCheck: false });\r\n        console.log(stateInfo);\r\n    }\r\n\r\n    handleChange(e) {\r\n        e.preventDefault();\r\n        const { name, value } = e.target;\r\n        let errors = this.state.errors;\r\n\r\n        switch (name) {\r\n            case 'fullname':\r\n                errors['fullname'] = value.length < 5 ? 'Fullname too short' : '';\r\n                break;\r\n            case 'phoneNumber':\r\n                errors['phoneNumber'] = value.length < 10 || value.length > 10 ? 'Phone number not valid' : '';\r\n                break;\r\n            case 'aadhar':\r\n                errors['aadhar'] = value.length < 12 || value.length > 12 ? 'Aadhar number not valid' : '';\r\n                break;\r\n            case 'email':\r\n                errors['email'] = validEmailRegex.test(value) ? '' : 'Email not Valid';\r\n                break;\r\n            case 'permanentAddress':\r\n                errors['permanentAddress'] = value.length < 10 ? 'Invalid Address' : '';\r\n                break;\r\n            case 'currentAddress':\r\n                errors['currentAddress'] = value.length < 10 ? 'Invalid Address' : '';\r\n                break;\r\n            case 'zip':\r\n                errors['zip'] = value.length < 6 || value.length > 6 ? 'Invalid Zip' : '';\r\n                break;\r\n            case 'city':\r\n                errors['city'] = value.length === 0 ? \"Invalid City Name\" : '';\r\n                break;\r\n            case 'state':\r\n                this.setState({ districtOptions: stateInfo[value], districtCheck: true })\r\n                errors['state'] = value === '' ? 'Required' : '';\r\n                break;\r\n            case 'district':\r\n                errors['district'] = value === '' ? 'Required' : '';\r\n                break;\r\n        }\r\n\r\n        this.setState({ errors, [name]: value })\r\n    }\r\n\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (this.validateForm(this.state.errors)) {\r\n            // console.log(this.state);\r\n            console.info('Valid Form');\r\n            this.setState({ submitCheck: true });\r\n\r\n            const formData = new FormData();\r\n            const { fullname, email, state, district, city, zip, phoneNumber, aadhar, internationalTravel, nationalTravel,\r\n                permanentAddress, currentAddress } = this.state;\r\n\r\n            const dataToSend = {\r\n                fullname: fullname,\r\n                email: email,\r\n                state: state,\r\n                district: district,\r\n                city: city,\r\n                zip: zip,\r\n                phoneNumber: phoneNumber,\r\n                aadhar: aadhar,\r\n                internationalTravel: internationalTravel,\r\n                nationalTravel: nationalTravel,\r\n                permanentAddress: permanentAddress,\r\n                currentAddress: currentAddress\r\n            }\r\n\r\n            // http://localhost:8080\r\n            const url = \"/api/survey\";\r\n\r\n            axios.post(url, dataToSend)\r\n                .then(response => {\r\n                    if (response.status === 200) {\r\n                        console.log(\"yes I am in \");\r\n                        console.log(response);\r\n                        this.setState({ resultCheck: true, result: response.data, valid: true, submitCheck: false })\r\n                        console.log(this.state.result)\r\n                    } else if (response.status === 500) {\r\n                        this.setState({ resultCheck: true, result: response.data, valid: false, submitCheck: false })\r\n                        console.log(this.state.result)\r\n                    }\r\n                }, error => {\r\n                    const resMessage = (error.response && error.response.data\r\n                        && error.response.data.message) || error.message || error.toString();\r\n\r\n                    this.setState({ message: resMessage, submitCheck: false });\r\n                    console.log(this.state.result)\r\n                }\r\n                )\r\n        } else {\r\n            console.error('Invalid Form')\r\n        }\r\n    }\r\n\r\n    validateForm(errors) {\r\n        let valid = true;\r\n        Object.values(errors).forEach((val) =>\r\n            val.length > 0 && (valid = false)\r\n        )\r\n        return valid;\r\n    }\r\n\r\n    render() {\r\n        const stateOptions = this.state.stateOptions.map(name => (\r\n            <option value={name} key={name}>{name}</option>\r\n        ));\r\n\r\n        return (\r\n            <div className=\"surveyMainContainer\">\r\n                {this.state.submitCheck === false && this.state.resultCheck === false && (\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                <label for=\"email\">Email</label>\r\n                                <input type=\"email\" className=\"form-control\" placeholder=\"Email\"\r\n                                    name=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n                                {this.state.errors.email.length > 0 &&\r\n                                    <span className='alert alert-danger'>{this.state.errors.email}</span>}\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                <label for=\"fullname\">Fullname</label>\r\n                                <input type=\"fullname\" className=\"form-control\" placeholder=\"Fullname\"\r\n                                    name=\"fullname\" value={this.state.fullname} onChange={this.handleChange} />\r\n                                {this.state.errors.fullname.length > 0 &&\r\n                                    <span className='alert alert-danger'>{this.state.errors.fullname}</span>}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label for=\"currentAddress\">Currrent Address</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"1234 Main St\"\r\n                                name=\"currentAddress\" value={this.state.currentAddress} onChange={this.handleChange} />\r\n                            {this.state.errors.currentAddress.length > 0 &&\r\n                                <span className='alert alert-danger'>{this.state.errors.currentAddress}</span>}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label for=\"permanentAddress\">Permanent Address</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"1234 Main St\"\r\n                                name=\"permanentAddress\" value={this.state.permanentAddress} onChange={this.handleChange} />\r\n                            {this.state.errors.permanentAddress.length > 0 &&\r\n                                <span className='alert alert-danger'>{this.state.errors.permanentAddress}</span>}\r\n                        </div>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                <label for=\"mobile\">Phone Number</label>\r\n                                <input type=\"number\" className=\"form-control\" placeholder=\"Contact number\"\r\n                                    name=\"phoneNumber\" value={this.state.phoneNumber} onChange={this.handleChange} />\r\n                                {this.state.errors.phoneNumber.length > 0 &&\r\n                                    <span className='alert alert-danger'>{this.state.errors.phoneNumber}</span>}\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                <label for=\"aadhar\">Aadhar Number</label>\r\n                                <input type=\"number\" className=\"form-control\" placeholder=\"Aadhar number\"\r\n                                    name=\"aadhar\" value={this.state.aadhar} onChange={this.handleChange} />\r\n                                {this.state.errors.aadhar.length > 0 &&\r\n                                    <span className='alert alert-danger'>{this.state.errors.aadhar}</span>}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-3\">\r\n                                <label for=\"state\">State</label>\r\n                                <select className=\"form-control\" name=\"state\"\r\n                                    value={this.state.state} onChange={this.handleChange}>\r\n                                    <option selected>Choose...</option>\r\n                                    {stateOptions}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"form-group col-md-3\">\r\n                                <label for=\"district\">District</label>\r\n                                <select className=\"form-control\" name=\"district\"\r\n                                    value={this.state.district} onChange={this.handleChange}>\r\n                                    <option selected>Choose...</option>\r\n                                    {this.state.districtCheck === true && this.state.districtOptions && (this.state.districtOptions.map(name => (\r\n                                        <option key={name} value={name}>{name}</option>\r\n                                    )))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"form-group col-md-3\">\r\n                                <label for=\"city\">City</label>\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"city\"\r\n                                    name=\"city\" value={this.state.city} onChange={this.handleChange} />\r\n                                {this.state.errors.city.length > 0 &&\r\n                                    <span className='alert alert-danger'>{this.state.errors.city}</span>}\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-3\">\r\n                                <label for=\"zip\">Zip</label>\r\n                                <input type=\"number\" className=\"form-control\" placeholder=\"zip\"\r\n                                    name=\"zip\" value={this.state.zip} onChange={this.handleChange} />\r\n                                {this.state.errors.zip.length > 0 &&\r\n                                    <span className='alert alert-danger'>{this.state.errors.zip}</span>}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                <label for=\"internationalTravel\">If Travelled Internationally</label>\r\n                                <select className=\"form-control\" name=\"internationalTravel\"\r\n                                    value={this.state.internationalTravel} onChange={this.handleChange}>\r\n                                    <option>Yes</option>\r\n                                    <option>No</option>\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-6\">\r\n                                <label for=\"nationalTravel\">If Travelled Nationally</label>\r\n                                <select className=\"form-control\" name=\"nationalTravel\"\r\n                                    value={this.state.nationalTravel} onChange={this.handleChange}>\r\n                                    <option>Yes</option>\r\n                                    <option>No</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                    </form>\r\n                )}\r\n\r\n                {this.state.submitCheck === true && this.state.resultCheck === false && (\r\n                    <div className=\"resultDisplay\">\r\n                        <Loader\r\n                            type=\"Rings\"\r\n                            color=\"#00BFFF\"\r\n                        />\r\n                    </div>\r\n                )}\r\n\r\n                {this.state.resultCheck === true && this.state.valid === true && (\r\n                    <div className=\"resultDisplay\" >\r\n                        <div className=\"successResult\">\r\n                            {this.state.result.zone === \"Orange\" && (\r\n                                <i className=\"far fa-meh fa-5x\" style={{ color: \"orange\" }}>\r\n                                </i>\r\n                            )}\r\n                            {this.state.result.zone === \"Green\" && (\r\n                                <i className=\"far fa-smile-beam fa-5x\" style={{ color: \"green\" }}>\r\n                                </i>\r\n                            )}\r\n                            {this.state.result.zone === \"Red\" && (\r\n                                <i className=\"far fa-sad-tear fa-5x\" style={{ color: \"red\" }}>\r\n                                </i>\r\n                            )}\r\n\r\n                        </div>\r\n                        <div className=\"successResult\">\r\n                            <span>Zone</span>\r\n                            <h3>{this.state.result.zone}</h3>\r\n                        </div>\r\n                        <div className=\"successResult\">\r\n                            <span>Safety Scale</span>\r\n                            <h3>{this.state.result.safetyMeter.toPrecision(2)}</h3>\r\n                            <ProgressBar stripped variant=\"success\" animated now={Math.ceil(this.state.result.safetyMeter)}\r\n                                label={`${this.state.result.safetyMeter.toPrecision(2)}%`} />\r\n                        </div>\r\n                        <div className=\"successResult\">\r\n                            <span>Danger Scale</span>\r\n                            <h3>{this.state.result.dangerMeter.toPrecision(2)}</h3>\r\n                            <ProgressBar stripped variant=\"danger\" animated now={Math.ceil(this.state.result.dangerMeter)}\r\n                                label={`${this.state.result.dangerMeter.toPrecision(2)}%`} />\r\n                        </div>\r\n                        <div className=\"successResult\">\r\n                            <span>Message</span>\r\n                            <h3>{this.state.result.message}</h3>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n\r\n                {this.state.resultCheck === true && this.state.valid === false && (\r\n                    <div className=\"resultDisplay\" >\r\n                        <div className=\"errorResult\">\r\n                            <i className=\"far fa-meh-rolling-eyes fa-5x\" style={{ color: \"orange\" }}></i>\r\n                        </div>\r\n                        <div className=\"row errorResult\"><span>Result</span>: {this.state.result.message}</div>\r\n                    </div>\r\n                )}\r\n\r\n                {this.state.message !== '' && this.state.resultCheck === false && (\r\n                    <div className=\"resultDisplay\" >\r\n                        <div className=\"errorResult\">\r\n                            <i className=\"far fa-tired fa-5x\" style={{ color: \"red\" }}></i>\r\n                        </div>\r\n                        <div className=\"row errorResult\">\r\n                            <h3>{this.state.result.message}</h3>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Survey;","import React from 'react';\r\n\r\n\r\nclass Helpline extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            result: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n        const url = 'https://covid-19india-api.herokuapp.com/v2.0/helpline_numbers';\r\n        fetch(proxyurl + url)\r\n            .then(res => res.json())\r\n            .then(data => this.setState({ result: data[1].contact_details }))\r\n    }\r\n\r\n    render() {\r\n        const rowItems1 = this.state.result.map((data, index) => (\r\n            <tr className=\"table-info\" key={index}>\r\n                <th scope=\"row\">{data.state_or_UT}</th>\r\n                <td>{data.helpline_number}</td>\r\n            </tr>\r\n        ))\r\n        return (\r\n            <div style={{ 'width': '100%', 'height': 'auto' }}>\r\n                <p className=\"infoText\" style={{ fontSize: '16px' }}>Helpline Numbers</p>\r\n                <table className=\"table\">\r\n                    <tbody>\r\n                        {rowItems1}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Helpline;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom'\nimport Home from './Components/Home';\nimport IndiaMap from './Components/IndiaMap';\nimport CountryInfo from './Components/CountryInfo';\nimport Survey from './Components/Survey';\nimport Helpline from './Components/Helpline';\n\nclass App extends React.Component {\n  render() {\n\n    return (\n      <Router>\n        <div className=\"App\">\n          <nav className=\"navbar navbar-expand-lg  bg-dark\">\n            <a className=\"navbar-brand\" href=\"#\">COVID INFO SITE</a>\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n              <ul className=\"navbar-nav mr-auto\">\n                <li className=\"nav-item active\">\n                  <a className=\"nav-link\" href=\"/home\">Home<span className=\"sr-only\">(current)</span></a>\n                </li>\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" href=\"/india\">India Detailed Info</a>\n                </li>\n                <li>\n                  <a className=\"nav-link\" href=\"/helpline-India\">Helpline</a>\n                </li>\n              </ul>\n              <span className=\"navbar-text\">\n                <a href=\"/survey\">Take the Survey</a>\n              </span>\n            </div>\n          </nav>\n\n          <div>\n            <Switch>\n              <Route exact path={[\"/\", \"/home\"]} component={Home} />\n              <Route exact path=\"/india\" component={IndiaMap} />\n              <Route exact path=\"/info/:code/:countryName\" component={CountryInfo} />\n              <Route exact path=\"/survey\" component={Survey} />\n              <Route exact path=\"/helpline-India\" component={Helpline} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}